import pytest
from bot.utils.calculator import calculate_total, format_summary
from telegram import Update, Message
from telegram.ext import ContextTypes, ConversationHandler
from typing import cast
from unittest.mock import AsyncMock
from bot.states import (
    CHOOSING_SIZE,
    CHOOSING_STYLE,
    CHOOSING_FACE_COUNT,
    CHOOSING_OPTIONS,
)

from bot.handlers.calculator import (
    start_calculator,
    size_chosen,
    style_chosen,
    face_count_chosen,
    options_chosen,
)
from bot.keyboards.calculator import (
    size_keyboard, style_keyboard, option_keyboard
)


@pytest.mark.parametrize(
    'order, expected_total, expected_in_lines',
    [
        # 1. –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        (
            {
                'size': '30√ó40',
                'style': '–ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ',
                'faces': 0,
                'options': []
            },
            1545,
            ['–†–∞–∑–º–µ—Ä: 30√ó40', '–°—Ç–∏–ª—å: –ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ']
        ),

        # 2. –°—Ç–∏–ª—å —Å 1 –ª–∏—Ü–æ–º (Dream Art)
        (
            {'size': '30√ó40', 'style': 'Dream Art', 'faces': 1, 'options': []},
            1545 + 1200,
            ['–°—Ç–∏–ª—å: Dream Art', '–õ–∏—Ü: 1 ‚Äî 1200 ‚ÇΩ']
        ),

        # 3. –°—Ç–∏–ª—å —Å 3 –ª–∏—Ü–∞–º–∏ (Dream Art)
        (
            {'size': '30√ó40', 'style': 'Dream Art', 'faces': 3, 'options': []},
            1545 + 1200 + 600 * 2,
            ['–õ–∏—Ü: 3 ‚Äî 2400 ‚ÇΩ']
        ),

        # 4. –°—Ç–∏–ª—å —Å 1 –ª–∏—Ü–æ–º + 2 –æ–ø—Ü–∏–∏
        (
            {
                'size': '40√ó60',
                'style': 'Digital Art',
                'faces': 1,
                'options': ['–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞', '–§–∞–∫—Ç—É—Ä–Ω—ã–π –≥–µ–ª—å']
            },
            2085 + 1200 + 245 + 350,
            ['–§–∞–∫—Ç—É—Ä–Ω—ã–π –≥–µ–ª—å ‚Äî 350 ‚ÇΩ', '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ ‚Äî 245 ‚ÇΩ']
        ),

        # 5. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        (
            {
                'size': '100√ó100',
                'style': '–°—Ç–∏–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç',
                'faces': 2,
                'options': ['–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ']
            },
            0,
            []
        ),
    ]
)
def test_calculate_total_cases(
    order: dict, expected_total: int, expected_in_lines: list[str]
) -> None:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é calculate_total –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    :param order: –í—Ö–æ–¥–Ω–æ–π –∑–∞–∫–∞–∑ (—Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    :param expected_total: –û–∂–∏–¥–∞–µ–º–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    :param expected_in_lines: –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    """
    total, lines = calculate_total(order)
    assert total == expected_total  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    for expected in expected_in_lines:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        assert any(expected in line for line in lines)


@pytest.mark.parametrize(
    'order, expected_substrings',
    [
        # –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π
        (
            {
                'size': '30√ó40',
                'style': '–ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ',
                'faces': 0,
                'options': []
            },
            ['–†–∞–∑–º–µ—Ä: 30√ó40', '–°—Ç–∏–ª—å: –ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ', 'üí∞ –ò—Ç–æ–≥–æ:']
        ),
        # –°—Ç–∏–ª—å —Å –ª–∏—Ü–∞–º–∏
        (
            {
                'size': '40√ó60',
                'style': 'Digital Art',
                'faces': 2,
                'options': []
            },
            ['–°—Ç–∏–ª—å: Digital Art', '–õ–∏—Ü: 2 ‚Äî 1800 ‚ÇΩ', 'üí∞ –ò—Ç–æ–≥–æ:']
        ),
        # –°—Ç–∏–ª—å + –æ–ø—Ü–∏–∏
        (
            {
                'size': '50√ó70',
                'style': 'Dream Art',
                'faces': 1,
                'options': ['–§–∞–∫—Ç—É—Ä–Ω—ã–π –≥–µ–ª—å']
            },
            [
                '–†–∞–∑–º–µ—Ä: 50√ó70',
                '–õ–∏—Ü: 1 ‚Äî 1200 ‚ÇΩ',
                '–§–∞–∫—Ç—É—Ä–Ω—ã–π –≥–µ–ª—å ‚Äî 350 ‚ÇΩ',
                'üí∞ –ò—Ç–æ–≥–æ:'
            ]
        ),
        # –ü—É—Å—Ç–æ–π / –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∑–∞–∫–∞–∑
        (
            {
                'size': 'UNKNOWN',
                'style': '???',
                'faces': 0,
                'options': ['–ß—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ']
            },
            ['üí∞ –ò—Ç–æ–≥–æ:']
        )
    ]
)
def test_format_summary_variants(
    order: dict, expected_substrings: list[str]
) -> None:
    '''
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é format_summary –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    :param order: –í—Ö–æ–¥–Ω–æ–π –∑–∞–∫–∞–∑ (—Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    :param expected_substrings: –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    '''
    result = format_summary(order)

    assert isinstance(result, str)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Å—Ç—Ä–æ–∫–∞
    for substr in expected_substrings:
        assert substr in result  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ


@pytest.mark.asyncio
async def test_style_chosen_simple_style(
    fake_update: Update, fake_context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è. '''
    message = cast(Message, fake_update.message)
    message.text = '–ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ'
    result = await style_chosen(fake_update, fake_context)
    assert result == CHOOSING_OPTIONS

    user_data = cast(dict, fake_context.user_data)
    assert user_data['style'] == '–ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ'

    reply = cast(AsyncMock, message.reply_text)
    reply.assert_called_once()
    args, kwargs = reply.call_args
    assert '—Å—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω' in args[0].lower()
    assert kwargs['reply_markup'] == option_keyboard


@pytest.mark.asyncio
async def test_style_chosen_with_faces(
    fake_update: Update, fake_context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è —Å –ª–∏—Ü–∞–º–∏. '''
    message = cast(Message, fake_update.message)
    message.text = 'Dream Art'
    result = await style_chosen(fake_update, fake_context)
    assert result == CHOOSING_FACE_COUNT

    user_data = cast(dict, fake_context.user_data)
    assert user_data['style'] == 'Dream Art'

    reply = cast(AsyncMock, message.reply_text)
    reply.assert_called_once()
    args, _ = reply.call_args
    assert '—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü' in args[0].lower()


@pytest.mark.asyncio
async def test_style_chosen_invalid(
    fake_update: Update, fake_context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è. '''
    message = cast(Message, fake_update.message)
    message.text = '–°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å'
    result = await style_chosen(fake_update, fake_context)

    assert result == CHOOSING_STYLE
    reply = cast(AsyncMock, message.reply_text)
    reply.assert_called_once_with('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.')


@pytest.mark.asyncio
async def test_size_chosen_valid(
    fake_update: Update, fake_context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —Ö–æ–ª—Å—Ç–∞. '''
    message = cast(Message, fake_update.message)
    message.text = '30√ó40'
    result = await size_chosen(fake_update, fake_context)
    assert result == CHOOSING_STYLE
    user_data = cast(dict, fake_context.user_data)
    assert user_data['size'] == '30√ó40'
    reply = cast(AsyncMock, message.reply_text)
    reply.assert_called_once()
    args, kwargs = reply.call_args
    assert '—Å—Ç–∏–ª—å –ø–æ—Ä—Ç—Ä–µ—Ç–∞' in args[0].lower()
    assert kwargs['reply_markup'].keyboard == style_keyboard.keyboard


@pytest.mark.asyncio
async def test_size_chosen_invalid(
    fake_update: Update, fake_context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —Ö–æ–ª—Å—Ç–∞. '''
    message = cast(Message, fake_update.message)
    message.text = '150√ó150'  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä
    result = await size_chosen(fake_update, fake_context)

    assert result == CHOOSING_SIZE
    reply = cast(AsyncMock, message.reply_text)
    reply.assert_called_once_with(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.'
    )


@pytest.mark.asyncio
@pytest.mark.parametrize(
    'input_text, expected_state, expected_faces, should_call_keyboard',
    [
        ('1', CHOOSING_OPTIONS, 1, True),
        ('5', CHOOSING_OPTIONS, 5, True),
        ('10', CHOOSING_OPTIONS, 10, True),
        ('0', CHOOSING_FACE_COUNT, None, False),
        ('11', CHOOSING_FACE_COUNT, None, False),
        ('abc', CHOOSING_FACE_COUNT, None, False),
        ('', CHOOSING_FACE_COUNT, None, False),
    ]
)
async def test_face_count_chosen_param(
    input_text: str,
    expected_state: int,
    expected_faces: int | None,
    should_call_keyboard: bool,
    fake_update: Update,
    fake_context: ContextTypes.DEFAULT_TYPE
) -> None:
    '''
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏—Ü.
    :param input_text: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param expected_state: –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    :param expected_faces: –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ü.
    :param should_call_keyboard: –î–æ–ª–∂–µ–Ω –ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    '''
    assert fake_update.message is not None
    msg = cast(Message, fake_update.message)
    msg.text = input_text

    result = await face_count_chosen(fake_update, fake_context)

    assert result == expected_state
    user_data = cast(dict, fake_context.user_data)
    if expected_faces is not None:
        assert user_data['faces'] == expected_faces
    else:
        assert 'faces' not in user_data

    reply = cast(AsyncMock, msg.reply_text)
    reply.assert_called_once()
    args, kwargs = reply.call_args

    if should_call_keyboard:
        assert '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' in args[0].lower()
        assert kwargs['reply_markup'] == option_keyboard
    else:
        assert '–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ' in args[0].lower()


@pytest.mark.asyncio
@pytest.mark.parametrize(
    'input_text, '
    'expected_state, '
    'initial_options, '
    'expected_options, '
    'summary_called, '
    'expected_reply',
    [
        # –ù–æ–≤—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏
        (
            '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞',
            CHOOSING_OPTIONS,
            [],
            ['–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞'],
            False,
            '–¥–æ–±–∞–≤–ª–µ–Ω–æ'
        ),
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–π –∂–µ –æ–ø—Ü–∏–∏
        (
            '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞',
            CHOOSING_OPTIONS,
            ['–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞'],
            ['–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞'],
            False,
            '—É–∂–µ –≤—ã–±—Ä–∞–Ω–∞'
        ),
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è
        (
            '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è',
            CHOOSING_OPTIONS,
            [],
            [],
            False,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π'
        ),
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        (
            '–ì–æ—Ç–æ–≤–æ',
            ConversationHandler.END,
            ['–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞'],
            ['–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞'],
            True,
            '–∑–∞–≤–µ—Ä—à—ë–Ω'
        )
    ]
)
async def test_options_chosen_param(
    input_text: str,
    expected_state: int,
    initial_options: list[str],
    expected_options: list[str],
    summary_called: bool,
    expected_reply: str,
    fake_update: Update,
    fake_context: ContextTypes.DEFAULT_TYPE,
    monkeypatch
) -> None:
    '''
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π.
    :param input_text: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param expected_state: –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    :param initial_options: –ù–∞—á–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏.
    :param expected_options: –û–∂–∏–¥–∞–µ–º—ã–µ –æ–ø—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    :param summary_called: –î–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω summarize_order.
    :param expected_reply: –û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
    '''
    msg = cast(Message, fake_update.message)
    msg.text = input_text
    user_data = cast(dict, fake_context.user_data)
    user_data['options'] = initial_options.copy()

    # –ü–æ–¥–º–µ–Ω—è–µ–º summarize_order –µ—Å–ª–∏ "–ì–æ—Ç–æ–≤–æ"
    summarize_mock = AsyncMock()
    monkeypatch.setattr(
        'bot.handlers.calculator.summarize_order', summarize_mock
    )

    result = await options_chosen(fake_update, fake_context)

    assert result == expected_state
    assert user_data['options'] == expected_options

    msg_reply = cast(AsyncMock, msg.reply_text)
    msg_reply.assert_called_once()
    args, kwarg = msg_reply.call_args
    assert expected_reply.lower() in args[0].lower()

    if summary_called:
        summarize_mock.assert_awaited_once_with(fake_update, fake_context)
    else:
        summarize_mock.assert_not_called()


@pytest.mark.asyncio
async def test_start_calculator_sends_keyboard(
    fake_update: Update, fake_context: ContextTypes.DEFAULT_TYPE
) -> None:
    ''' –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '''
    result = await start_calculator(fake_update, fake_context)
    message = cast(Message, fake_update.message)
    reply = cast(AsyncMock, message.reply_text)
    reply.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    args, kwargs = reply.call_args
    assert '—Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞' in args[0].lower()
    assert kwargs['reply_markup'].keyboard == size_keyboard.keyboard

    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    assert result == CHOOSING_SIZE
