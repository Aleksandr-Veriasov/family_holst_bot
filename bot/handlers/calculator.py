import logging
from typing import cast

from telegram import Message, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes, ConversationHandler

from bot.keyboards.calculator import (
    option_keyboard, size_keyboard, style_keyboard
)
from bot.prices import AVAILABLE_SIZES, EXTRA_OPTIONS, STYLE_OPTIONS
from bot.states import (
    CHOOSING_FACE_COUNT,
    CHOOSING_OPTIONS,
    CHOOSING_SIZE,
    CHOOSING_STYLE,
)
from bot.utils.calculator import format_summary
from bot.utils.decorators import ensure_message

logger = logging.getLogger(__name__)


@ensure_message
async def start_calculator(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    # –ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.
    assert update.message is not None
    message: Message = update.message

    await message.reply_text(
        'üìê –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞:',
        reply_markup=size_keyboard
    )
    return CHOOSING_SIZE


@ensure_message
async def size_chosen(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞.
    assert update.message is not None
    message: Message = update.message
    size = message.text

    if size not in AVAILABLE_SIZES:
        await message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.'
        )
        return CHOOSING_SIZE

    user_data = cast(dict, context.user_data)
    user_data['size'] = size
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä: {size}')

    await message.reply_text(
        f'‚úÖ –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä - {size}.\n –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–æ—Ä—Ç—Ä–µ—Ç–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
        reply_markup=style_keyboard
    )
    return CHOOSING_STYLE


@ensure_message
async def style_chosen(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è.
    assert update.message is not None
    message: Message = update.message
    style = message.text

    if style not in STYLE_OPTIONS:
        await message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.'
        )
        return CHOOSING_STYLE

    user_data = cast(dict, context.user_data)
    user_data['style'] = style
    logger.info(f'–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style}')

    if style != '–ü—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ':
        await message.reply_text(
            'üë§ –°–∫–æ–ª—å–∫–æ –ª–∏—Ü –±—É–¥–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–µ?\n'
            '(–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.)'
        )
        return CHOOSING_FACE_COUNT
    else:
        user_data = cast(dict, context.user_data)
        user_data['faces'] = 0
        await message.reply_text(
            '‚úÖ –°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω.\n\n–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ?'
            '\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".',
            reply_markup=option_keyboard
        )
        return CHOOSING_OPTIONS


@ensure_message
async def face_count_chosen(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏—Ü.
    assert update.message is not None
    message: Message = update.message
    text = message.text or ''

    try:
        count = int(text)
        if count < 1 or count > 10:
            raise ValueError
    except ValueError:
        await message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.'
        )
        return CHOOSING_FACE_COUNT

    user_data = cast(dict, context.user_data)
    user_data['faces'] = count
    logger.info(f'–í—ã–±—Ä–∞–Ω–æ –ª–∏—Ü: {count}')

    await message.reply_text(
        '‚úÖ –ö–æ–ª-–≤–æ –ª–∏—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ?'
        '\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".',
        reply_markup=option_keyboard
    )
    return CHOOSING_OPTIONS


@ensure_message
async def options_chosen(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π.
    assert update.message is not None
    message: Message = update.message
    selected = message.text or ''
    user_data = cast(dict, context.user_data)

    if selected == '–ì–æ—Ç–æ–≤–æ':
        user_data.setdefault('options', [])
        logger.info(f'–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {context.user_data}')
        await message.reply_text(
            '‚úÖ –í—ã–±–æ—Ä –æ–ø—Ü–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω.',
            reply_markup=ReplyKeyboardRemove()
        )
        await summarize_order(update, context)  # —Å—Ä–∞–∑—É —Ä–∞—Å—á—ë—Ç
        return ConversationHandler.END

    if selected not in EXTRA_OPTIONS:
        await message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –∏–ª–∏ '
            '–Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".'
        )
        return CHOOSING_OPTIONS

    user_data.setdefault('options', [])

    if selected not in user_data['options']:
        user_data['options'].append(selected)
        logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø—Ü–∏—è: {selected}')
        await message.reply_text(f'–î–æ–±–∞–≤–ª–µ–Ω–æ: {selected}')
    else:
        await message.reply_text('–≠—Ç–∞ –æ–ø—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞.')

    return CHOOSING_OPTIONS


@ensure_message
async def summarize_order(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    assert update.message is not None
    message: Message = update.message
    user_data = cast(dict, context.user_data)

    await message.reply_text(format_summary(user_data))
    return ConversationHandler.END
