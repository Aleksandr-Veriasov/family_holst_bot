import logging

from telegram import InputFile, Message, Update
from telegram.ext import ContextTypes, ConversationHandler

from bot.config import IMAGE_DIR
from bot.keyboards.common import main_menu_button
from bot.keyboards.examples import style_keyboard
from bot.prices import STYLE_OPTIONS
from bot.utils.decorators import ensure_message

logger = logging.getLogger(__name__)

CHOOSING_EXAMPLE_STYLE = 100  # —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM


# –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ "–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç"
@ensure_message
async def show_example_styles(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    assert update.message is not None
    message: Message = update.message

    await message.reply_text(
        'üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç:',
        reply_markup=style_keyboard
    )
    return CHOOSING_EXAMPLE_STYLE


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
@ensure_message
async def send_example_images(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    assert update.message is not None
    message: Message = update.message
    selected_style = message.text
    logger.info(f'[EXAMPLES] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª—å: {selected_style}')

    if selected_style not in STYLE_OPTIONS:
        await message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return CHOOSING_EXAMPLE_STYLE

    style_path = IMAGE_DIR / selected_style
    logger.info(f'[EXAMPLES] –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å—Ç–∏–ª—è: {style_path}')

    if not style_path.exists():
        logger.error(f'[EXAMPLES] –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {style_path}')
        await message.reply_text(
            f'‚ùóÔ∏è –ü–∞–ø–∫–∞ –¥–ª—è —Å—Ç–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:\n{style_path}',
            reply_markup=main_menu_button
        )
        return ConversationHandler.END

    images = [f for f in style_path.iterdir() if f.suffix.lower() in (
        '.jpg', '.jpeg', '.png'
    )]
    images = images[:5]

    if not images:
        await message.reply_text(
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è.',
            reply_markup=main_menu_button
        )
        return ConversationHandler.END

    await message.reply_text(f'üñº –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –≤ —Å—Ç–∏–ª–µ ¬´{selected_style}¬ª:')
    for img_path in images:
        try:
            with open(img_path, 'rb') as file:
                await message.reply_photo(InputFile(file))
            logger.info(f'[EXAMPLES] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_path}')
        except Exception as e:
            logger.exception(f'[EXAMPLES] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {img_path}: {e}')
            await message.reply_text(
                f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {img_path.name}'
            )

    await message.reply_text(
        '–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=main_menu_button
    )
    return ConversationHandler.END
