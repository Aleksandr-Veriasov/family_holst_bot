import logging
from datetime import datetime, time

import pytz
from telegram import Update, Message
from telegram.ext import ContextTypes, ConversationHandler

from bot.config import ADMIN_ID
from bot.utils.decorators import ensure_message

logger = logging.getLogger(__name__)

WAITING_FOR_MESSAGE = 200


def is_within_working_hours() -> bool:
    now = datetime.now(pytz.timezone('Europe/Moscow')).time()
    return time(10, 0) <= now < time(19, 0)


def format_user_message(user, text: str) -> str:
    username = user.username or user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    return (
        f'üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} '
        f'(ID: {user.id}):\n\n{text}'
    )


@ensure_message
async def request_contact(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    assert update.message is not None
    message: Message = update.message

    await message.reply_text(
        '‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.'
    )
    return WAITING_FOR_MESSAGE


@ensure_message
async def forward_to_manager(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    assert update.message is not None
    user = update.effective_user
    if not user:
        logger.warning('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ update.')
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        return ConversationHandler.END

    text = update.message.text or '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'
    message = format_user_message(user, text)

    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=message)
        logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.')
    except Exception:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:')
        await update.message.reply_text(
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        return ConversationHandler.END

    if is_within_working_hours():
        response = (
            '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n'
            '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.'
        )
    else:
        response = (
            '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n'
            '–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: '
            '—Å 10:00 –¥–æ 19:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.'
        )

    await update.message.reply_text(response)
    return ConversationHandler.END
